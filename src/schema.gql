scalar BigDecimalU256

type BorrowerInfo {
  id: ID! # "borrowerAddress", e.g. "0x0000000000000000000000000000000000000000"
  nextOwnerIndexes: [Int!]!
  troves: Int!
  trovesByCollateral: [Int!]!
}

type Collateral {
  id: ID! # "collIndex", e.g. "0"
  collIndex: Int!
  minCollRatio: BigDecimalU256!
  troves: [Trove!]! @derivedFrom(field: "collateral")
  addresses: CollateralAddresses! @derivedFrom(field: "collateral")
}

type CollateralAddresses {
  id: ID! # "collIndex", e.g. "0"
  collateral: Collateral!
  borrowerOperations: String!
  liquidationManager: String!
  redemptionManager: String!
  sortedTroves: String!
  stabilityPool: String!
  token: String!
  troveManagerEventsEmitter: String!
  troveManager: String!
  troveNft: String!
}

type InterestRateBracket {
  id: ID! # "collIndex:rateFloored", e.g. "0:44000000000000000"
  collateral: Collateral!
  rate: BigDecimalU256!
  totalDebt: BigDecimalU256!
}

type InterestBatch {
  id: ID! # "collIndex:batchManager", e.g. "0:0x0000000000000000000000000000000000000000"
  collateral: Collateral!
  batchManager: String!
  debt: BigDecimalU256!
  coll: BigDecimalU256!
  annualInterestRate: BigDecimalU256!
  annualManagementFee: BigDecimalU256!
  troves: [Trove!]! @derivedFrom(field: "interestBatch")
}

type Trove {
  id: ID! # "collIndex:TroveNFTId", e.g. 0:0x1731afc858cad2708001a4f71851f9f775729c22f47df7c4360b1e416fd0f2de
  borrower: String!
  collateral: Collateral!
  closedAt: Int
  createdAt: Int!
  mightBeLeveraged: Boolean!
  status: String! #TroveStatus
  updatedAt: Int!
  lastUserActionAt: Int!
  debt: BigDecimalU256!
  deposit: BigDecimalU256!
  interestBatch: InterestBatch
  interestRate: BigDecimalU256!
  stake: BigDecimalU256!
  troveId: String!
  previousOwner: String!
  redemptionCount: Int!
  redeemedColl: BigDecimalU256!
  redeemedDebt: BigDecimalU256!
  liquidationTx: String
}

type TroveNFT {
  id: ID! # "TroveNFTAddress"
  collId: String!
}

type TroveManagerEventsEmitter {
  id: ID! # "TroveManagerEventsEmitterAddress"
  collId: String!
}


##### Points System #####

# User aggregate data
type User {
  id: ID! # User address
  totalPoints: BigDecimalU256!
  totalValue: BigDecimalU256! # Total USD value across all positions
  totalRate: BigDecimalU256! # Total points per second earning rate
  lastUpdateTime: Int! # Unix timestamp of last update
  
  # Relations to specific positions
  stabilityPoolPositions: [StabilityPoolPosition!]! @derivedFrom(field: "user")
  ekuboPositions: [EkuboPosition!]! @derivedFrom(field: "user")
  vesuPositions: [VesuPosition!]! @derivedFrom(field: "user")
}

# Stability Pool position
type StabilityPoolPosition {
  id: ID! # "userAddress-spAddress"
  user: User!
  value: BigDecimalU256! # USD value deposited
  poolAddress: String! # Stability pool contract address
  pointsEarned: BigDecimalU256!
  earningRate: BigDecimalU256! # Points per second
  stashedColl: BigDecimalU256! # Stashed collateral
  lastUpdateTime: Int! # Unix timestamp of last update
}

# Liquidity Pool position (Ekubo)
type EkuboPosition {
  id: ID! # "userAddress-poolAddress"
  user: User!
  pool: String! # Pool identifier (e.g., "USDU/BTC", "USDU/USDC")
  poolAddress: String! # Ekubo pool contract address
  value: BigDecimalU256! # USD value of LP position
  pointsEarned: BigDecimalU256!
  earningRate: BigDecimalU256! # Points per second
  lastUpdateTime: Int! # Unix timestamp of last update
}

# Money Market position (Vesu)
type VesuPosition {
  id: ID! # "userAddress-marketId-positionType"
  user: User!
  market: String! # Market identifier
  positionType: String!
  value: BigDecimalU256! # USD value (positive for deposits, negative for borrows)
  pointsEarned: BigDecimalU256!
  earningRate: BigDecimalU256! # Points per second
  lastUpdateTime: Int! # Unix timestamp of last update
}
